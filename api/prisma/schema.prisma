//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma-types"
    output = "../src/zod/generated"
}

/// @@allow('all', auth() == this)
/// @@allow('all', activeTenantId == auth().activeTenantId)
model User {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @omit
    deletedAt DateTime?
    name String
    email String @unique()
    username String @unique()
    driver Driver?
    admin Admin?
    activeTenant Tenant? @relation(fields: [activeTenantId], references: [id])
    activeTenantId String?
    tenantConnections TenantUserRelation[]
}

model Tenant {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @omit
    deletedAt DateTime?
    name String
    activeUsers User[]
    adminProfiles Admin[]
    driverProfiles Driver[]
    userConnections TenantUserRelation[]
    haulingCompaniesConnections TenantHaulingCompanyRelation[]
}

model TenantUserRelation {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @omit
    deletedAt DateTime?
    tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    tenantId String
    user User? @relation(fields: [userId], references: [id])
    userId String
}

/// @@allow('all', tenantConnections?[tenant.activeUsers?[auth()]])
model HaulingCompany {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @omit
    deletedAt DateTime?
    name String
    description String
    drivers Driver[]
    tenantConnections TenantHaulingCompanyRelation[]
}

model TenantHaulingCompanyRelation {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @omit
    deletedAt DateTime?
    tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    tenantId String
    haulingCompany HaulingCompany? @relation(fields: [haulingCompanyId], references: [id])
    haulingCompanyId String
}

/// @@allow('all', tenantId == auth().activeTenantId)
model Driver {
    tenant Tenant? @relation(fields: [tenantId], references: [id])
    tenantId String
    userId String @unique()
    user User @relation(fields: [userId], references: [id])
    haulingCompanyId String
    haulingCompany HaulingCompany @relation(fields: [haulingCompanyId], references: [id])
}

/// @@allow('all', tenantId == auth().activeTenantId)
model Admin {
    tenant Tenant? @relation(fields: [tenantId], references: [id])
    tenantId String
    userId String @unique()
    user User @relation(fields: [userId], references: [id])
}