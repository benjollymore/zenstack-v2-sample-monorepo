//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/zod/generated"
}

/// @@allow('all', auth() == this)
/// @@allow('all', activeTenantId == auth().activeTenantId)
model User {
  id                String               @id() @default(uuid())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt()
  /// @omit
  deletedAt         DateTime?
  name              String
  email             String               @unique()
  username          String               @unique()
  driver            Driver?
  admin             Admin?
  activeTenant      Tenant?              @relation(fields: [activeTenantId], references: [id])
  activeTenantId    String
  tenantConnections TenantUserRelation[]
}

model Tenant {
  id              String               @id() @default(uuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt()
  /// @omit
  deletedAt       DateTime?
  name            String
  activeUsers     User[]
  adminProfiles   Admin[]
  driverProfiles  Driver[]
  userConnections TenantUserRelation[]
}

/// @@allow('all', tenantId == auth().activeTenantId)
model Admin {
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  /// @omit
  deletedAt DateTime?
  userId    String    @unique()
  user      User      @relation(fields: [userId], references: [id])
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

/// @@allow('all', tenantId == auth().activeTenantId)
model Driver {
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  /// @omit
  deletedAt DateTime?
  userId    String    @unique()
  user      User      @relation(fields: [userId], references: [id])
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model TenantUserRelation {
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  /// @omit
  deletedAt DateTime?
  tenant    Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  user      User?     @relation(fields: [userId], references: [id])
  userId    String
}
